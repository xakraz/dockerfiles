#!/usr/bin/env bash
#
# == DNSMasq local resolver for Dev usage
#
# dnsmasq in a docker container, configurable via a simple web UI
#
# Reference:
# - https://github.com/jpillora/docker-dnsmasq
#
#
#
# == Bash options
#
set -o errexit
set -o pipefail
set -o nounset



# == Vars
#
#
if [[ $(uname -s) == "Darwin" ]] ; then
  SCRIPT_NAME=$(basename $(readlink ${BASH_SOURCE[0]}))
else
  SCRIPT_NAME=$(basename $(readlink -e ${BASH_SOURCE[0]}))
fi

DNSMASQ_CONF_FILE="${DNSMASQ_CONF_FILE:-${HOME}/.config/dnsmasq-dev/dnsmasq.conf}"
DNSMASQ_PORT="${DNSMASQ_PORT:-53}"

# Hub.docker.io
DOCKER_REGISTRY=""
DOCKER_REPOSITORY='jpillora'
DOCKER_IMAGE_NAME='dnsmasq'
DOCKER_IMAGE_VERSION='latest'


docker_args='--rm --log-driver=none --detach'
docker_env_vars=''
docker_cmd="$@"



# == Compute config
#
# === Docker Registry
#
docker_image=''

# Manage Docker Hub
[[ -n "${DOCKER_REGISTRY}" ]] \
  && docker_image="${DOCKER_REGISTRY}/${DOCKER_REPOSITORY}" \
  || docker_image="${DOCKER_REPOSITORY}"

# Compute full image name
docker_image="${docker_image}/${DOCKER_IMAGE_NAME}"
docker_image="${docker_image}:${DOCKER_IMAGE_VERSION}"

# Option to shell out
if [[ 'shell' == "$@" ]]; then
  docker_args="${docker_args} --entrypoint /bin/sh -it"
  docker_cmd=''
fi


# === Options
#
docker_args="${docker_args} --name ${SCRIPT_NAME}"
docker_args="${docker_args} --volume=${DNSMASQ_CONF_FILE}:/etc/dnsmasq.conf"
docker_args="${docker_args} --publish ${DNSMASQ_PORT}:53/udp"
docker_args="${docker_args} --publish 5380:8080"
docker_args="${docker_args} --env='HTTP_USER=${USER}'"
docker_args="${docker_args} --env='HTTP_PASS=bar'"



# == Run
#
echo "===> ${SCRIPT_NAME}: $1"
case $1 in
  "start")
    echo "---> Starting Docker container: ${SCRIPT_NAME}"
    shift
    docker_cmd="$@"

    docker run \
      ${docker_args} \
      ${docker_image} \
      ${docker_cmd}
    echo "---> WebUI accessible on : http://127.0.0.1:5380"

    echo "---> Setting local resolver to /etc/resolv/conf"
    if [[ -e '/etc/resolv.conf' ]]; then
      sudo bash -c "cp /etc/resolv.conf{,.back}"
      sudo bash -c "cat <<EOF > /etc/resolv.conf
# Config generated by ${SCRIPT_NAME} at $(date)
# WebUI accessible on : http://127.0.0.1:5380
nameserver 127.0.0.1
EOF"
    fi
    ;;

  "stop")
    docker stop ${SCRIPT_NAME}
    if [[ -e '/etc/resolv.conf.back' ]]; then
      echo "---> Restoring /etc/resolv/conf"
      sudo bash -c "cp /etc/resolv.conf{.back,}"
    fi
    ;;

  "status")
    docker ps -f "name=${SCRIPT_NAME}"
    ;;

  *)
    echo "Unknown action $1"
    echo ""
    echo "Available actions are:"
    echo "* start:  Start the service"
    echo "* stop:   Stop the service"
    echo "* status: Status of the service"
    echo ""
    ;;
esac

echo "===> ${SCRIPT_NAME}: Done"
